import{BasePlugin,BaseComponent}from"vatom-spaces-plugins";export default class MultipleChoiceQuizPlugin extends BasePlugin{static id="multiple-choice-quiz";static name="Multiple Choice Quiz Plugin";static description="Creates a multiple-choice quiz when the component is clicked.";onLoad(){this.objects.registerComponent(SingleQuizComponent,{id:"single-quiz-component",name:"Quiz Single Question",description:"Creates a single question multiple-choice quiz when the object is clicked. If multiple questions are provided, the question can be randomized.",settings:e=>[{id:"quizTitle",name:"Quiz Title",type:"text",help:"Title of the quiz.",default:"Pop Quiz"},{id:"questions",name:"Question",type:"textarea",help:"JSON string representing quiz question and choices. By default the single question quiz will use the first question provided."},{id:"question-random",name:"Randomize Question",type:"checkbox",help:"If multiple questions are provided, this will randomize the single question that appears.",default:!1},{id:"section-end-message",name:"Quiz Game Over Messages",type:"section"},{id:"endMessageWin",name:"Game Over Win",type:"textarea",help:"Message to display at the end when user gets all the answers correct.",default:"Congratulations! You answered correctly!"},{id:"endMessageLose",name:"Game Over Lose",type:"textarea",help:"Message to display at the end when user gets any answers wrong.",default:"Try again next time."},{id:"gameOverModal",name:"Quiz Aready Taken",type:"textarea",help:"If the quiz cannot be retaken, this message appears once completed.",default:"You have already taken this quiz."},{id:"section-analytics",name:"Quiz Analytics & Action Setup",type:"section"},{id:"action-id",name:"Trigger Action ID",type:"text",help:"Trigger an action when the quiz has been completed successfully, based on a unique ID.",default:"none"},{id:"analyticsKey",name:"Analytics Name",type:"text",help:"Name for the analytics event. The value sent will be equal to the number of correct answers."},{id:"limitResponse",name:"Limit Replay After:",type:"select",values:["None","Any Finish","All Correct"],help:'When an option is selected, the quiz cannot be re-taken after the finishing the quiz or after answering all correctly. "Quiz Taken" state is tracked by Analytics Name.',default:"None"},{id:"section-timer",name:"Quiz Timer Settings",type:"section"},{id:"timerOn",name:"Timer Enabled",type:"checkbox",help:"Enable or Disable the Timer feature.",default:!1},{id:"timerDuration",name:"Timer Duration",type:"number",help:"Time in seconds for each question.",default:10},{id:"section-helpguide",name:"Quiz Creator Help Guide",type:"section"},{id:"helpGuide",name:"Help Guide",type:"button",help:"Provide instructions or a guide for the quiz"}]}),this.objects.registerComponent(SingleQuizActivityComponent,{id:"activity-simplequiz",name:"Activity: Simple Quiz",description:"A single question Quiz"})}async onMessage(e){console.log("[QUIZ BASEPLUGIN] onMessage : ",e);const{action:t,result:i,response:n,correctAnswer:s,analytics:o,allCorrect:a,limitResponse:r,actionID:l,popupID:c,IS_ACTIVITY:u,adminUser:p,zoneId:d,options:h}=e;if("send-results"==e.action){if(e.isActivityComponent){const t=await this.user.getID();h.response=n,h.correctAnswer=s;const i={activityType:"quiz",activityID:l,adminUser:p,zoneId:d||null,options:h||{},respondingUserId:t,result:e.result,response:n,correctAnswer:s};return this.hooks.trigger("activity-response",i),void(e.popupID&&setTimeout((()=>this.menus.closePopup(e.popupID)),3e3))}let t=await e.analytics,i=await e.result,o=await e.allCorrect,a=await e.limitResponse,r=await e.actionID,c=await this.user.getID(),u=await e.popupID;this.user.sendAnalytics(t,i),!0===o&&this.hooks.trigger("jeffworld.actions.play",{actionID:r,userID:c,allCorrect:o});let m="quiz"+t;("Any Finish"===a||"All Correct"===a&&o)&&await this.user.setProperties({[m]:!0}),setTimeout((()=>{this.menus.closePopup(u)}),3e3)}}}class SingleQuizActivityComponent extends BaseComponent{static id="activity-simplequiz";static name="Simple Quiz";myUserID=null;activityDescribe=(e={})=>{const t=e&&e.componentID;return t&&!t.endsWith(`:${this.constructor.id}`)||e?.zoneId&&e.zoneId!==this.objectID?null:(console.log("[QUIZ ACTIVITY] describe called on",this.objectID||"(no object)","returns type=alertness"),{type:"simplequiz",title:"Which answer is correct?",shortTitle:"Quiz",description:"A simple multiple-choice quiz",icon:this.paths.absolute("icons/quiz.svg"),supportsDuration:!0,optionsSchema:{type:"object",properties:{title:{type:"string",title:"Question",default:"Which is the Correct Answer?",validate:{required:!0,minLength:3}},answerChoices:{ui:"group",type:"object",title:"Answer Choices",order:["A","B","C","D"],validate:{minNonEmpty:2},properties:{A:{type:"string",default:"",placeholder:"Option A"},B:{type:"string",default:"",placeholder:"Option B"},C:{type:"string",default:"",placeholder:"Option C (optional)"},D:{type:"string",default:"",placeholder:"Option D (optional)"}}},correctAnswer:{enum:["A","B","C","D"],title:"Correct Answer",default:"A",validate:{inLettersFrom:"answerChoices"}},duration:{type:"number",title:"Duration (ms)",default:1e4,minimum:1e3}}},componentID:`${this.plugin.constructor.id}:${this.constructor.id}`,zoneId:this.objectID||null,vendor:this.plugin&&this.plugin.constructor&&this.plugin.constructor.id||null})};buildQuestionsFromOptions(e={}){const t=String(e.question||e.title||"Untitled question");let i=Array.isArray(e.answers)?e.answers:Array.isArray(e.answerChoices)?e.answerChoices:[e.optionA,e.optionB,e.optionC,e.optionD];i=Array.isArray(i)?i:[];let n=i.map(((e,t)=>({text:null==e?"":String(e).trim(),i:t}))).filter((e=>e.text.length>0));const s={A:0,B:1,C:2,D:3};let o=0;if("number"==typeof e.correct&&Number.isFinite(e.correct))o=e.correct;else if(null!=e.correctAnswer){const t=String(e.correctAnswer).trim().toUpperCase();o=s[t]??0}else if(null!=e.correctChoice){const t=String(e.correctChoice).trim().toUpperCase();o=s[t]??0}let a=0;const r=n.findIndex((e=>e.i===o));if(a=r>=0?r:0,n.length<2){const e=["Option 1","Option 2","Option 3","Option 4"];for(let t=0;n.length<2&&t<e.length;t++)n.push({text:e[t],i:100+t});a>=n.length&&(a=0)}return[{question:t,choices:n.map((e=>e.text)),correct:a}]}activityStart=async e=>{console.log("[QUIZ ACTIVITY] ActivityStart ",e);const t=this.myUserID||await this.plugin.user.getID(),i="simplequiz"===e?.type,n="string"==typeof e?.componentID&&e.componentID.endsWith(":activity-simplequiz");if(!i&&!n)return!1;if(e?.targetUserId&&e.targetUserId!==t)return!1;if(e?.zoneId&&e.zoneId!==this.objectID)return!1;const{activityID:s,adminUser:o,zoneId:a,options:r={}}=e;console.log("[QUIZ ACTIVITY] Started with options:",r);const l=this.buildQuestionsFromOptions(r),c=Math.max(1,Number(r.duration||6e3))/1e3,u=String(r.title||"Quiz"),p=s,d=await this.plugin.menus.displayPopup({title:u,panel:{iframeURL:this.paths.absolute("./quiz-panel-singlequestion.html"),width:500,height:500,onClose:()=>{this.isPopupOpen=!1}}});this.isPopupOpen=!0;const h={content:l,randomQuestion:!1,limitResponse:!1,quizTitle:u,endMessageWin:"Congratulations! You answered correctly!",endMessageLose:"Sorry, that's incorrect.",timerOn:!0,timerDuration:c,popupID:d,actionID:p,activityID:s,isActivityComponent:!0,adminUser:o,zoneId:a,options:r};return setTimeout((()=>{this.updatePanelContent(h)}),1250),!0};async updatePanelContent(e){const{content:t,randomQuestion:i,limitResponse:n,quizTitle:s,endMessageWin:o,endMessageLose:a,timerOn:r,timerDuration:l,popupID:c,actionID:u,activityID:p,isActivityComponent:d,adminUser:h,zoneId:m,options:g}=e;this.plugin.menus.postMessage({action:"update-quiz",content:t,randomQuestion:i,limitResponse:n,quizTitle:s,endMessageWin:o,endMessageLose:a,timerOn:r,timerDuration:l,popupID:c,actionID:u,activityID:p,isActivityComponent:!0,adminUser:h,zoneId:m,options:g}),console.log("[QUIZ ACTIVITY] Update Panel Content: ",e)}async sendResponse(e,t){const{activityID:i,adminUser:n,zoneId:s,options:o={}}=e,a=this.myUserID||await this.plugin.user.getID();this.plugin.messages.send({action:"activity-response",global:!0,payload:{activityType:"quiz",activityID:i,zoneId:s,options:{...o,respondingUserId:a},respondingUserId:a,response:t}},!0,n)}async onMessage(e){if(console.log("[QUIZ ACTIVITY] Message received in Quiz Activity Component: ",e),"send-results"!==e?.action){if(!String(e.actionID||"").startsWith("quiz-"))return!1;const t=e.zoneId||this.objectID||null,i=e.options||{},n={...e.result||{},allCorrect:!!e.allCorrect};await this.sendResponse({activityID,adminUser:null,zoneId:t,options:i},n),e.popupID&&setTimeout((()=>this.plugin.menus.closePopup(e.popupID)),2e3)}return"request-quiz"===e.action&&this.updatePanelContent(e),!0}async onLoad(){this.myUserID=await this.plugin.user.getID(),this.plugin.hooks.addHandler("vatom-activities-start",this.activityStart),this.plugin.hooks.addHandler("vatom-activities-info",this.activityDescribe);const e=this.objectID||"(no object id)";console.log("[QUIZ ACTIVITY] Loaded on",e,"user",this.myUserID),console.log("[QUIZ ACTIVITY] onLoad â†’ handlers registered. objectID=",this.objectID||"(no object)")}async onUnload(){this.plugin.hooks.removeHandler("vatom-activities-start",this.activityStart),this.plugin.hooks.removeHandler("vatom-activities-info",this.activityDescribe)}}export const components=[SingleQuizActivityComponent];